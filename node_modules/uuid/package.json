{
  "_args": [
    [
      {
        "raw": "uuid@^3.0.1",
        "scope": null,
        "escapedName": "uuid",
        "name": "uuid",
        "rawSpec": "^3.0.1",
        "spec": ">=3.0.1 <4.0.0",
        "type": "range"
      },
      "D:\\coco\\es6-learn\\node_modules\\sockjs"
    ]
  ],
  "_from": "uuid@^3.0.1",
  "_hasShrinkwrap": false,
  "_id": "uuid@3.3.2",
  "_location": "/uuid",
  "_nodeVersion": "10.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/uuid_3.3.2_1530221341707_0.5404045638057293"
  },
  "_npmUser": {
    "name": "broofa",
    "email": "robert@broofa.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "uuid@^3.0.1",
    "scope": null,
    "escapedName": "uuid",
    "name": "uuid",
    "rawSpec": "^3.0.1",
    "spec": ">=3.0.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sockjs",
    "/webpack-log"
  ],
  "_resolved": "https://registry.npmjs.org/uuid/-/uuid-3.3.2.tgz",
  "_shasum": "1b4af4955eb3077c501c23872fc6513811587131",
  "_shrinkwrap": null,
  "_spec": "uuid@^3.0.1",
  "_where": "D:\\coco\\es6-learn\\node_modules\\sockjs",
  "bin": {
    "uuid": "./bin/uuid"
  },
  "browser": {
    "./lib/rng.js": "./lib/rng-browser.js",
    "./lib/sha1.js": "./lib/sha1-browser.js",
    "./lib/md5.js": "./lib/md5-browser.js"
  },
  "bugs": {
    "url": "https://github.com/kelektiv/node-uuid/issues"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "contributors": [
    {
      "name": "Robert Kieffer",
      "email": "robert@broofa.com"
    },
    {
      "name": "Christoph Tavan",
      "email": "dev@tavan.de"
    },
    {
      "name": "AJ ONeal",
      "email": "coolaj86@gmail.com"
    },
    {
      "name": "Vincent Voyer",
      "email": "vincent@zeroload.net"
    },
    {
      "name": "Roman Shtylman",
      "email": "shtylman@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "RFC4122 (v1, v4, and v5) UUIDs",
  "devDependencies": {
    "@commitlint/cli": "7.0.0",
    "@commitlint/config-conventional": "7.0.1",
    "eslint": "4.19.1",
    "husky": "0.14.3",
    "mocha": "5.2.0",
    "runmd": "1.0.1",
    "standard-version": "4.4.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-yXJmeNaw3DnnKAOKJE51sL/ZaYfWJRl1pK9dr19YFCu0ObS231AB1/LbqTKRAQ5kw8A90rA6fr4riOUpTZvQZA==",
    "shasum": "1b4af4955eb3077c501c23872fc6513811587131",
    "tarball": "https://registry.npmjs.org/uuid/-/uuid-3.3.2.tgz",
    "fileCount": 21,
    "unpackedSize": 43599,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbNVMdCRA9TVsSAnZWagAAHMAP/3dazKIzx5o8pB3uqIOa\nUj3OOWemMXXKN6m/ncbq23zi69Vi0WRpYwC8vbRiD+NwXdnV5yP5fesAoGjw\ngttCujsby2Q96xqGDmnpxF//+OZC2/fPt/EBVtvlZM/KSpevRoDBF03ihcFL\nGyAFS7i0FvRJskP2xp+72Z+6C6A24OvW7BB+WGJcTh8z7QbStTPDQmjam1jM\n9lkez4SbOpFd4Hpca1yFM8HRb6UGUFo+UdIoylbaeKnUDBzCmtv1LwtkL77I\noMB8AyHna8iUjv43l08EODev+G08dBQcrL2K83WMp+ztAHwi8KOryxTLKgUV\nvZwaObtCH77QSnraFF5Vq1onGw+FTckQlP0zS37e5IKSRv0GV/t3E1aSkemt\ndDU2qURkFLyVuGSV8utAMWvwTDA6CEsXeEs49ZEYtZWKeEKc1dXxx0ovVMBV\nxGFgmTnP+pYXUCnqrXlJfkfEtBvGhU6N4KmfBz8tAWjfafYFZng9pQxF04vh\nMgHOy7upIMtDKZCyCGW+C81L24cdggmOVGfLHIpMLbMpR05cS1gXqHGe1OBy\nY5SP34YgMjhRnyfvb1LlcDJEjJvruzx46UP/D9JDBmjhLTJSDxwQuN+UrjPx\n9WhQEv/P3CvSlHVpfd+NF6b0vwM7IoiWbxMwF3z9jZpNU7o+3pySZrni3aMC\nHEgb\r\n=qIAF\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "fe4ae79c55af2c7cbf2bb39d3bcb6716d5367091",
  "homepage": "https://github.com/kelektiv/node-uuid#readme",
  "keywords": [
    "uuid",
    "guid",
    "rfc4122"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "broofa",
      "email": "robert@broofa.com"
    },
    {
      "name": "defunctzombie",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "vvo",
      "email": "vincent.voyer@gmail.com"
    }
  ],
  "name": "uuid",
  "optionalDependencies": {},
  "readme": "<!--\n  -- This file is auto-generated from README_js.md. Changes should be made there.\n  -->\n\n# uuid [![Build Status](https://secure.travis-ci.org/kelektiv/node-uuid.svg?branch=master)](http://travis-ci.org/kelektiv/node-uuid) #\n\nSimple, fast generation of [RFC4122](http://www.ietf.org/rfc/rfc4122.txt) UUIDS.\n\nFeatures:\n\n* Support for version 1, 3, 4 and 5 UUIDs\n* Cross-platform\n* Uses cryptographically-strong random number APIs (when available)\n* Zero-dependency, small footprint (... but not [this small](https://gist.github.com/982883))\n\n[**Deprecation warning**: The use of `require('uuid')` is deprecated and will not be\nsupported after version 3.x of this module.  Instead, use `require('uuid/[v1|v3|v4|v5]')` as shown in the examples below.]\n\n## Quickstart - CommonJS (Recommended)\n\n```shell\nnpm install uuid\n```\n\nThen generate your uuid version of choice ...\n\nVersion 1 (timestamp):\n\n```javascript\nconst uuidv1 = require('uuid/v1');\nuuidv1(); // ⇨ '45745c60-7b1a-11e8-9c9c-2d42b21b1a3e'\n\n```\n\nVersion 3 (namespace):\n\n```javascript\nconst uuidv3 = require('uuid/v3');\n\n// ... using predefined DNS namespace (for domain names)\nuuidv3('hello.example.com', uuidv3.DNS); // ⇨ '9125a8dc-52ee-365b-a5aa-81b0b3681cf6'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidv3('http://example.com/hello', uuidv3.URL); // ⇨ 'c6235813-3ba4-3801-ae84-e0a6ebb7d138'\n\n// ... using a custom namespace\n//\n// Note: Custom namespaces should be a UUID string specific to your application!\n// E.g. the one here was generated using this modules `uuid` CLI.\nconst MY_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';\nuuidv3('Hello, World!', MY_NAMESPACE); // ⇨ 'e8b5a51d-11c8-3310-a6ab-367563f20686'\n\n```\n\nVersion 4 (random):\n\n```javascript\nconst uuidv4 = require('uuid/v4');\nuuidv4(); // ⇨ '10ba038e-48da-487b-96e8-8d3b99b6d18a'\n\n```\n\nVersion 5 (namespace):\n\n```javascript\nconst uuidv5 = require('uuid/v5');\n\n// ... using predefined DNS namespace (for domain names)\nuuidv5('hello.example.com', uuidv5.DNS); // ⇨ 'fdda765f-fc57-5604-a269-52a7df8164ec'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidv5('http://example.com/hello', uuidv5.URL); // ⇨ '3bbcee75-cecc-5b56-8031-b6641c1ed1f1'\n\n// ... using a custom namespace\n//\n// Note: Custom namespaces should be a UUID string specific to your application!\n// E.g. the one here was generated using this modules `uuid` CLI.\nconst MY_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';\nuuidv5('Hello, World!', MY_NAMESPACE); // ⇨ '630eb68f-e0fa-5ecc-887a-7c7a62614681'\n\n```\n\n## Quickstart - Browser-ready Versions\n\nBrowser-ready versions of this module are available via [wzrd.in](https://github.com/jfhbrook/wzrd.in).\n\nFor version 1 uuids:\n\n```html\n<script src=\"http://wzrd.in/standalone/uuid%2Fv1@latest\"></script>\n<script>\nuuidv1(); // -> v1 UUID\n</script>\n```\n\nFor version 3 uuids:\n\n```html\n<script src=\"http://wzrd.in/standalone/uuid%2Fv3@latest\"></script>\n<script>\nuuidv3('http://example.com/hello', uuidv3.URL); // -> v3 UUID\n</script>\n```\n\nFor version 4 uuids:\n\n```html\n<script src=\"http://wzrd.in/standalone/uuid%2Fv4@latest\"></script>\n<script>\nuuidv4(); // -> v4 UUID\n</script>\n```\n\nFor version 5 uuids:\n\n```html\n<script src=\"http://wzrd.in/standalone/uuid%2Fv5@latest\"></script>\n<script>\nuuidv5('http://example.com/hello', uuidv5.URL); // -> v5 UUID\n</script>\n```\n\n## API\n\n### Version 1\n\n```javascript\nconst uuidv1 = require('uuid/v1');\n\n// Incantations\nuuidv1();\nuuidv1(options);\nuuidv1(options, buffer, offset);\n```\n\nGenerate and return a RFC4122 v1 (timestamp-based) UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n\n  * `node` - (Array) Node id as Array of 6 bytes (per 4.1.6). Default: Randomly generated ID.  See note 1.\n  * `clockseq` - (Number between 0 - 0x3fff) RFC clock sequence.  Default: An internally maintained clockseq is used.\n  * `msecs` - (Number) Time in milliseconds since unix Epoch.  Default: The current time is used.\n  * `nsecs` - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if `msecs` is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.\n\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nNote: The <node> id is generated guaranteed to stay constant for the lifetime of the current JS runtime. (Future versions of this module may use persistent storage mechanisms to extend this guarantee.)\n\nExample: Generate string UUID with fully-specified options\n\n```javascript\nconst v1options = {\n  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n  clockseq: 0x1234,\n  msecs: new Date('2011-11-01').getTime(),\n  nsecs: 5678\n};\nuuidv1(v1options); // ⇨ '710b962e-041c-11e1-9234-0123456789ab'\n\n```\n\nExample: In-place generation of two binary IDs\n\n```javascript\n// Generate two ids in an array\nconst arr = new Array();\nuuidv1(null, arr, 0);  // ⇨ [ 69, 117, 109, 208, 123, 26, 17, 232, 146, 52, 45, 66, 178, 27, 26, 62 ]\nuuidv1(null, arr, 16); // ⇨ [ 69, 117, 109, 208, 123, 26, 17, 232, 146, 52, 45, 66, 178, 27, 26, 62, 69, 117, 109, 209, 123, 26, 17, 232, 146, 52, 45, 66, 178, 27, 26, 62 ]\n\n```\n\n### Version 3\n\n```javascript\nconst uuidv3 = require('uuid/v3');\n\n// Incantations\nuuidv3(name, namespace);\nuuidv3(name, namespace, buffer);\nuuidv3(name, namespace, buffer, offset);\n```\n\nGenerate and return a RFC4122 v3 UUID.\n\n* `name` - (String | Array[]) \"name\" to create UUID with\n* `namespace` - (String | Array[]) \"namespace\" UUID either as a String or Array[16] of byte values\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing. Default = 0\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nExample:\n\n```javascript\nuuidv3('hello world', MY_NAMESPACE);  // ⇨ '042ffd34-d989-321c-ad06-f60826172424'\n\n```\n\n### Version 4\n\n```javascript\nconst uuidv4 = require('uuid/v4')\n\n// Incantations\nuuidv4();\nuuidv4(options);\nuuidv4(options, buffer, offset);\n```\n\nGenerate and return a RFC4122 v4 UUID.\n\n* `options` - (Object) Optional uuid state to apply. Properties may include:\n  * `random` - (Number[16]) Array of 16 numbers (0-255) to use in place of randomly generated values\n  * `rng` - (Function) Random # generator function that returns an Array[16] of byte values (0-255)\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing.\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nExample: Generate string UUID with predefined `random` values\n\n```javascript\nconst v4options = {\n  random: [\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\n  ]\n};\nuuidv4(v4options); // ⇨ '109156be-c4fb-41ea-b1b4-efe1671c5836'\n\n```\n\nExample: Generate two IDs in a single buffer\n\n```javascript\nconst buffer = new Array();\nuuidv4(null, buffer, 0);  // ⇨ [ 54, 122, 218, 70, 45, 70, 65, 24, 171, 53, 95, 130, 83, 195, 242, 45 ]\nuuidv4(null, buffer, 16); // ⇨ [ 54, 122, 218, 70, 45, 70, 65, 24, 171, 53, 95, 130, 83, 195, 242, 45, 108, 204, 255, 103, 171, 86, 76, 94, 178, 225, 188, 236, 150, 20, 151, 87 ]\n\n```\n\n### Version 5\n\n```javascript\nconst uuidv5 = require('uuid/v5');\n\n// Incantations\nuuidv5(name, namespace);\nuuidv5(name, namespace, buffer);\nuuidv5(name, namespace, buffer, offset);\n```\n\nGenerate and return a RFC4122 v5 UUID.\n\n* `name` - (String | Array[]) \"name\" to create UUID with\n* `namespace` - (String | Array[]) \"namespace\" UUID either as a String or Array[16] of byte values\n* `buffer` - (Array | Buffer) Array or buffer where UUID bytes are to be written.\n* `offset` - (Number) Starting index in `buffer` at which to begin writing. Default = 0\n\nReturns `buffer`, if specified, otherwise the string form of the UUID\n\nExample:\n\n```javascript\nuuidv5('hello world', MY_NAMESPACE);  // ⇨ '9f282611-e0fd-5650-8953-89c8e342da0b'\n\n```\n\n## Command Line\n\nUUIDs can be generated from the command line with the `uuid` command.\n\n```shell\n$ uuid\nddeb27fb-d9a0-4624-be4d-4615062daed4\n\n$ uuid v1\n02d37060-d446-11e7-a9fa-7bdae751ebe1\n```\n\nType `uuid --help` for usage details\n\n## Testing\n\n```shell\nnpm test\n```\n\n----\nMarkdown generated from [README_js.md](README_js.md) by [![RunMD Logo](http://i.imgur.com/h0FVyzU.png)](https://github.com/broofa/runmd)",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kelektiv/node-uuid.git"
  },
  "scripts": {
    "commitmsg": "commitlint -E GIT_PARAMS",
    "md": "runmd --watch --output=README.md README_js.md",
    "prepare": "runmd --output=README.md README_js.md",
    "release": "standard-version",
    "test": "mocha test/test.js"
  },
  "version": "3.3.2"
}
